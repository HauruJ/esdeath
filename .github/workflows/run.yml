name: Generate routing rules for Surge
on:
  workflow_dispatch:
  schedule:
    - cron: '0 23 * * *'
  push:
    branches:
      - master
    paths-ignore:
      - "**/README.md"

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    env:
      RELEASE_NAME: Released on ${{ github.run_number }}
      TAG_NAME: ${{ github.run_number }}
      ipv4_china: https://raw.githubusercontent.com/missuo/ASN-China/main/IP.China.list
      ipv6_china: https://raw.githubusercontent.com/missuo/ASN-China/main/IPv6.China.list
      tiktok_rules: https://gitlab.com/lodepuly/vpn_tool/-/raw/master/Tool/Loon/Rule/TikTok.list
      streaming_cn: https://github.com/ConnersHua/RuleGo/raw/master/Surge/Ruleset/Extra/Streaming/CN.list
      streaming_not_cn: https://github.com/ConnersHua/RuleGo/raw/master/Surge/Ruleset/Extra/Streaming/!CN.list
      emby_rules: https://github.com/Repcz/Tool/raw/X/Surge/Rules/Emby.list
      ai_rules: https://github.com/Coldvvater/Mononoke/raw/master/Surge/Rules/AI.list
      emby_one: https://github.com/1120109856/lynn/raw/main/fxw
      emby_two: https://github.com/1120109856/lynn/raw/main/zl
      antiip_direct: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/generated/rule-set-direct.list
      antiip_proxy: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/generated/rule-set-proxy.list
      antiip_reject: https://github.com/SunsetMkt/anti-ip-attribution/raw/main/generated/rule-set-reject.list

    steps:
      - name: Checkout the default branch
        uses: actions/checkout@v4
    
      - name: Make directory
        run: |
          mkdir -p Surge/Ruleset/{IPCIDR,Streaming/Video,Streaming,Custom,AntiIP} dist
        
      - name: Generate rule files
        run: |
          generate_rule_file() {
            local url=$1
            local output=$2
            local title=$3
            local description=$4
            local extra_processing=$5

            curl -sSL "$url" -o original_rules.list
            rules_count=$(grep -cE "^([0-9a-zA-Z]|#)" original_rules.list)
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")

            cat > "$output" <<EOF
          ################################################
          # $title for Surge
          #
          # Last Updated: $current_time
          # Size: $rules_count
          #
          # $description
          #
          # Data from:
          #  - $url
          ################################################

          EOF

            if [ -n "$extra_processing" ]; then
              eval "$extra_processing"
            else
              cat original_rules.list >> "$output"
            fi

            rm original_rules.list
          }

          # Generate IPv4.China.list
          generate_rule_file "$ipv4_china" "Surge/Ruleset/IPCIDR/IPv4.China.list" "China IPv4 List" "本文件只包含中国大陆的 IPv4 地址范围,用于 Surge 规则。" 'grep -E "^([0-9]{1,3}\.){3}[0-9]{1,3}/" original_rules.list | sed "s/^/IP-CIDR,/;s/$/,no-resolve/" >> "$output"'

          # Generate IPv6.China.list
          generate_rule_file "$ipv6_china" "Surge/Ruleset/IPCIDR/IPv6.China.list" "China IPv6 List" "本文件包含中国大陆的 IPv6 地址范围,用于 Surge 规则。" 'sed "s/^/IP-CIDR6,/;s/$/,no-resolve/" original_rules.list >> "$output"'

          # Generate TikTok.list
          generate_rule_file "$tiktok_rules" "Surge/Ruleset/Streaming/Video/TikTok.list" "TikTok List" "本文件包含 TikTok 的相关域名规则,用于 Surge 规则。" 'grep -E "^(AND|DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD)" original_rules.list >> "$output"'

          # Generate Streaming CN and !CN ruleset
          generate_rule_file "$streaming_cn" "Surge/Ruleset/Streaming/CN.list" "China Streaming List" "本文件包含中国流媒体域名规则,用于 Surge 规则。"
          generate_rule_file "$streaming_not_cn" "Surge/Ruleset/Streaming/!CN.list" "!China Streaming List" "本文件包含非中国流媒体域名规则,用于 Surge 规则。"

          # Generate Emby.list
          generate_rule_file "$emby_rules" "Surge/Ruleset/Streaming/Video/Emby.list" "Emby List" "本文件包含 Emby 的相关域名规则,用于 Surge 规则。"

          # Generate AI.list
          generate_rule_file "$ai_rules" "Surge/Ruleset/AI.list" "AI List" "本文件包含 AI 相关的域名规则,用于 Surge 规则。" 'cat original_rules.list >> "$output" && echo -e "\n# > OpenRouter\nDOMAIN-SUFFIX,openrouter.ai" >> "$output"'

      - name: Generate EmbyBravo.list file
        run: |
          process_file() {
            awk '{
              if ($0 ~ /^#/) {
                sub(/^#/, "# > ")
                print toupper($0)
              } else if ($0 ~ /^(DOMAIN|DOMAIN-SUFFIX|DOMAIN-KEYWORD|IP-CIDR|IP-CIDR6|USER-AGENT|URL-REGEX)/) {
                if ($0 ~ /^(IP-CIDR|IP-CIDR6)/ && !/no-resolve$/) {
                  print $0 ",no-resolve"
                } else {
                  print
                }
                print ""
              }
            }' "$1" > "$2"
          }

          curl -sSL "$emby_one" -o list1.raw
          curl -sSL "$emby_two" -o list2.raw

          process_file list1.raw list1.processed
          echo -e "\n# --- --- ---(2nd)--- --- --- \n" > list2.processed
          process_file list2.raw list2.processed

          cat list1.processed list2.processed > Surge/Ruleset/Streaming/Video/EmbyBravo.list

          count_rules() {
            grep -cE "^$1" Surge/Ruleset/Streaming/Video/EmbyBravo.list || echo 0
          }

          domain_keyword_count=$(count_rules "DOMAIN-KEYWORD")
          domain_suffix_count=$(count_rules "DOMAIN-SUFFIX")
          ip_cidr_count=$(count_rules "IP-CIDR")
          ip_cidr6_count=$(count_rules "IP-CIDR6")
          user_agent_count=$(count_rules "USER-AGENT")
          url_regex_count=$(count_rules "URL-REGEX")
          total_count=$((domain_keyword_count + domain_suffix_count + ip_cidr_count + ip_cidr6_count + user_agent_count + url_regex_count))

          header="################################################\n"
          header+="# Emby Server Rules for Surge\n# \n"
          header+="# Last Updated: $(date -u +"%Y-%m-%dT%H:%M:%S.000Z")\n#\n"
          [ "$domain_keyword_count" -ne 0 ] && header+="# DOMAIN-KEYWORD: $domain_keyword_count\n"
          [ "$domain_suffix_count" -ne 0 ] && header+="# DOMAIN-SUFFIX: $domain_suffix_count\n"
          [ "$ip_cidr_count" -ne 0 ] && header+="# IP-CIDR: $ip_cidr_count\n"
          [ "$ip_cidr6_count" -ne 0 ] && header+="# IP-CIDR6: $ip_cidr6_count\n"
          [ "$user_agent_count" -ne 0 ] && header+="# USER-AGENT: $user_agent_count\n"
          [ "$url_regex_count" -ne 0 ] && header+="# URL-REGEX: $url_regex_count\n"
          header+="# TOTAL: $total_count\n#\n"
          header+="# This file contains domain and IP rules from multiple sources, used for Surge rules.\n"
          header+="################################################\n\n"

          echo -e "$header" | cat - Surge/Ruleset/Streaming/Video/EmbyBravo.list > temp && mv temp Surge/Ruleset/Streaming/Video/EmbyBravo.list

          rm list1.raw list2.raw list1.processed list2.processed

      - name: Generate AntiIP rule files
        run: |
          generate_antiip_file() {
            local url=$1
            local output=$2
            local title=$3
            local description=$4

            curl -sSL "$url" -o original_rules.list
            grep -E "^(DOMAIN-SUFFIX|DOMAIN|IP-CIDR|DOMAIN-KEYWORD|IP-CIDR6)," original_rules.list > filtered_rules.list
            rules_count=$(wc -l < filtered_rules.list)
            current_time=$(date -u +"%Y-%m-%dT%H:%M:%S.000Z")

            cat > "$output" <<EOF
          ################################################
          # $title for Surge
          #
          # Last Updated: $current_time
          # Size: $rules_count
          #
          # $description
          #
          # Data from:
          #  - $url
          ################################################

          EOF

            cat filtered_rules.list >> "$output"
            rm original_rules.list filtered_rules.list
          }

          generate_antiip_file "$antiip_direct" "Surge/Ruleset/AntiIP/Direct.list" "AntiIP Direct List" "本文件包含反 IP 归属地检测的直连规则,用于 Surge 规则。"
          generate_antiip_file "$antiip_proxy" "Surge/Ruleset/AntiIP/Proxy.list" "AntiIP Proxy List" "本文件包含反 IP 归属地检测的代理规则,用于 Surge 规则。"
          generate_antiip_file "$antiip_reject" "Surge/Ruleset/AntiIP/Reject.list" "AntiIP Reject List" "本文件包含反 IP 归属地检测的拒绝规则,用于 Surge 规则。"

      - name: Commit and Push
        run: |
          git config --global user.name "the Magical Cat"
          git config --global user.email "theMagicalCat@users.noreply.github.com"
          git add .
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          git push origin HEAD
          
      - name: Purge jsdelivr CDN
        run: |
          cdn_files=(
            "Surge/Ruleset/IPCIDR/IPv4.China.list"
            "Surge/Ruleset/IPCIDR/IPv6.China.list"
            "Surge/Ruleset/Streaming/Video/TikTok.list"
            "Surge/Ruleset/Streaming/CN.list"
            "Surge/Ruleset/Streaming/!CN.list"
            "Surge/Ruleset/Streaming/Video/Emby.list"
            "Surge/Ruleset/Streaming/Video/EmbyBravo.list"
            "Surge/Ruleset/AI.list"
            "Surge/Ruleset/AntiIP/Direct.list"
            "Surge/Ruleset/AntiIP/Proxy.list"
            "Surge/Ruleset/AntiIP/Reject.list"
          )
          for file in "${cdn_files[@]}"; do
            curl -i "https://purge.jsdelivr.net/gh/${{ github.repository }}/$file"
          done

      - name: Commit and Push
        run: |
          git config --global user.name "the Magical Cat"
          git config --global user.email "theMagicalCat@users.noreply.github.com"
          git add .
          git commit -m "Auto Update $(TZ='Asia/Shanghai' date +'%Y-%m-%d %H:%M')"
          git push origin HEAD
            
